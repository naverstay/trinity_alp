script.
    function siteData() {
        return {
            showMainMenu: false,
            openMainMenu() {
                this.showMainMenu = true
            },
            closeMainMenu() {
                this.showMainMenu = false
            },
            mainMenuIsOpen() {
                return this.showMainMenu === true
            },

            activeMenu: 0,
            toggleDropdownMenu(index, ref) {
                let that = this;

                ref && window.slideToggle(ref, 300, function (ret) {
                    console.log('ret', ret);

                    if (ret === 'up') {
                        that.activeMenu = 0;
                    } else {
                        that.activeMenu = index;
                    }
                });
            },
            toggleDropdownClass(menu, ref) {
                let list = menu.querySelectorAll('.sublist');

                for (let i = 0; i < list.length; i++) {
                    let child = list[i];

                    if (child !== ref) {
                        window.slideUp(child, 300);
                    }
                }
            },
            isActiveDropdown(index) {
                return this.activeMenu === index;
            }
        }
    }

    function slideActions() {
        return {
            slideOpen: false,
            slideToggle(evt, parent) {
                evt.preventDefault();

                let that = this;

                if (parent) {
                    let slide = parent.querySelectorAll('.slideBlock');

                    for (let i = 0; i < slide.length; i++) {
                        const sld = slide[i];

                        window.slideToggle(sld, 200, function (ret) {
                            if (ret === 'up') {
                                that.slideOpen = false;
                            } else {
                                that.slideOpen = true;
                            }
                        });
                    }
                }

                return false;
            },
            isOpen() {
                return this.slideOpen;
            },
        }
    }

    function configuratorAlpine () {
        return {
            brand: {
                config: {
                    parts: []
                }
            },
            configurator: {
                cpu: [],
                fac: [],
                ups: []
            },
            partTypeIds: {
                CPU: 1,
                RAM: 2,
                SSD: 3,
                SATA: 4,
                SAS: 5,
                DVD: 6,
                RAID: 7,
                OtherContr: 8,
                SP: 9,
                Soft: 10,
                Other: 11,
                UPS: 36,
                Services: 47,
                GPU: 50,
                Switch: 52,
                Cache: 54
            },
            switchParam(evt, prm, ind) {
                evt.preventDefault();
                this.configurator[prm] = ind;

                return false;
            },
            toggleParam(evt, prm, name) {
                evt.preventDefault();

                var pos = this.configurator[prm].indexOf(name);

                if (pos > -1) {
                    this.configurator[prm].splice(pos, 1)
                } else {
                    this.configurator[prm].push(name)
                }

                return false;
            },
            getCheck(index, item, prm) {
                return '<label class="checkbox_v2"><input type="checkbox" value="3" :checked="{ activeParam(\'' + prm + '\', ' + (index + 1) + ') }"><span class="checkbox__text">' + item + '</span></label>'
            },
            getLink(index, item, prm) {
                return '<a class="switcher__link" href="#" @click="{ switchParam($event, \'' + prm +  '\', ' + (index + 1) + ') }" :class="{ active: ' + (index + 1) + ' === activeParam(\'' + prm + '\') }">' + item + '</a>'
            },
            activeParam(prm, name) {
                return this.configurator[prm].indexOf(name) > -1
            },
            checkVisibility(cpu, fac, ups) {
                let ret = true;

                if (this.configurator.cpu.length && this.configurator.cpu.indexOf(cpu) < 0) {
                    ret = false;
                }

                if (this.configurator.fac.length && this.configurator.fac.indexOf(fac) < 0) {
                    ret = false;
                }

                if (this.configurator.ups.length && this.configurator.ups.indexOf(ups) < 0) {
                    ret = false;
                }

                return ret
            },
            availableParam(prm) {
                let find = [];
                let slug = {cpu: 'xCPU', fac: '', ups: 'xPS'};

                for (const x of brand.config.parts) {
                    let check = (x[prm] + slug[prm]).toUpperCase();

                    if (find.indexOf(check) === -1) {
                        find.push(check)

                        this.configurator[prm].push(x[prm])
                    }
                }

                return find
            },
            getCategory(cat) {

                for (const x of brand.configs) {

                }

                return this.configurator[prm]
            },
            init() {
                fetch('/source/data/filter.json')
                    .then(response => response.json())
                    .then(response => {
                         console.log('fetched', response);

                         this.brand = response;
                    });




            }
        }
    }
